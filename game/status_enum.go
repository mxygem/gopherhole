// Code generated by go-enum
// DO NOT EDIT!

package game

import (
	"fmt"
)

const (
	// StatusComplete is a Status of type Complete
	StatusComplete Status = iota
	// StatusIncomplete is a Status of type Incomplete
	StatusIncomplete
	// StatusError is a Status of type Error
	StatusError
)

const _StatusName = "completeincompleteerror"

var _StatusMap = map[Status]string{
	0: _StatusName[0:8],
	1: _StatusName[8:18],
	2: _StatusName[18:23],
}

// String implements the Stringer interface.
func (x Status) String() string {
	if str, ok := _StatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Status(%d)", x)
}

var _StatusValue = map[string]Status{
	_StatusName[0:8]:   0,
	_StatusName[8:18]:  1,
	_StatusName[18:23]: 2,
}

// ParseStatus attempts to convert a string to a Status
func ParseStatus(name string) (Status, error) {
	if x, ok := _StatusValue[name]; ok {
		return x, nil
	}
	return Status(0), fmt.Errorf("%s is not a valid Status", name)
}

// MarshalText implements the text marshaller method
func (x Status) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Status) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
